#include <esp_now.h>
#include <WiFi.h>

// Define motor control pins for L298N
#define IN1 23
#define IN2 22
#define IN3 21
#define IN4 19

// Variable to store received data
char receivedCommand;

// Callback function executed when data is received
void onDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
    // Copy the received data into the variable
    memcpy(&receivedCommand, incomingData, sizeof(receivedCommand));
    Serial.print("Received command via ESP-NOW: ");
    Serial.println(receivedCommand);

    // Control motors based on the received command
    controlMotors(receivedCommand);
}

void setup() {
    // Start the serial communication for debugging
    Serial.begin(115200);
    while (!Serial) { delay(10); }  // Wait for Serial Monitor to initialize
    
    // Set ESP32 WiFi mode for ESP-NOW communication
    WiFi.mode(WIFI_STA);

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error: ESP-NOW Init Failed");
        return;  // Stop further execution if ESP-NOW fails
    }
    esp_now_register_recv_cb(onDataRecv);
    Serial.println("ESP-NOW initialized and ready to receive");

    // Initialize motor control pins
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);
    Serial.println("Motor control pins initialized");
}

void loop() {
    // No need to include any code in loop since everything is handled in the callback
}

void controlMotors(char command) {
    switch (command) {
        case 'F': // Move forward
            digitalWrite(IN1, HIGH);
            digitalWrite(IN2, LOW);
            digitalWrite(IN3, HIGH);
            digitalWrite(IN4, LOW);
            break;
        case 'B': // Move backward
            digitalWrite(IN1, LOW);
            digitalWrite(IN2, HIGH);
            digitalWrite(IN3, LOW);
            digitalWrite(IN4, HIGH);
            break;
        case 'L': // Turn left
            digitalWrite(IN1, LOW);
            digitalWrite(IN2, HIGH);
            digitalWrite(IN3, HIGH);
            digitalWrite(IN4, LOW);
            break;
        case 'R': // Turn right
            digitalWrite(IN1, HIGH);
            digitalWrite(IN2, LOW);
            digitalWrite(IN3, LOW);
            digitalWrite(IN4, HIGH);
            break;
        case 'S': // Stop
            digitalWrite(IN1, LOW);
            digitalWrite(IN2, LOW);
            digitalWrite(IN3, LOW);
            digitalWrite(IN4, LOW);
            break;
        default:
            Serial.println("Unknown command received");
            break; // Do nothing for unrecognized commands
    }
}
